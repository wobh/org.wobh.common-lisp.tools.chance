#+title: Chance README
#+date: <2021-07-24 Sat>
#+author: William Clifford
#+email: will@wobh.org
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+startup: overview

* Introduction

Provides some basic randomness tools.

* Purpose and License

This is here shared with the idea that some might find it useful for
personal experiments and toys--that's all I'm using it for. It might
also be cautionarily if not pedagogically useful. All that said, it
should not be expected to have any desirable characteristics or be
useful in any way.

Use by non-natural persons is forbidden.

Use by natural persons acting as agents on behalf of non-natural
persons is also forbidden.

Use by natural persons for non-casual purposes is strongly
discouraged.

* Instructions

To use:

1. Clone repository
   - *nix, GitHub :: =git clone https://github.com/wobh/org.wobh.common-lisp.tools.chance.git ${XDG_DATA_HOME}/common-lisp/source/org.wobh.common-lisp.tools.chance=
2. in REPL =(require "asdf")= (as needed)
3. =(asdf:load-system "org.wobh.common-lisp.tools.chance")=

The package defines a nickname of ~chance~ for convenience.

* Features
** ~chance~
*** Random numbers, characters

- ~random-whole~ : ~(integer 1 *)~ -> ~(integer 1 *)~
- ~random-range~ : ~integer~, ~integer~ -> ~(integer lower-bound upper-bound)~
- ~random-digit~ : -> ~character~
- ~random-alpha~ : -> ~characater~

*** Random sequence position, and array index or subscripts

- ~random-position~ : ~sequence~ -> ~(integer 0 upper-bound)~
- ~random-array-index~ : ~array~ -> ~(integer 0 upper-bound)~
- ~random-array-subscripts~ : ~array~ -> ~list~

*** Random sequence and array elements

Return random element from the non-list sequence types

- ~random-char~ : ~string~ -> ~character~
- ~random-svref~ : ~simple-vector~ -> ~t~
- ~random-aref~ : ~array~ -> ~t~

**** Random list item and general sequence element

Here for the completeness and casual convenience, but a little less
efficient than the specialized functions.

- ~random-nth~ : ~list~ -> ~t~
- ~random-elt~ : ~sequence~ -> ~t~

*** Sample random elements in strings, vectors, arrays

- ~sample-string~ : ~(or simple-vector (integer 1 *))~, ~string~ -> ~simple-vector~
- ~sample-simple-vector~ : ~(or simple-vector (integer 1 *))~, ~simple-vector~ -> ~simple-vector~
- ~sample-array~ : ~(or simple-vector (integer 1 *))~, ~array~ -> ~simple-vector~

*** Sample list items of different "types"

Return a vector of randomly selected items from lists. Currently
implemented with "algorithm R". May change to "algorithm L" in the
future.

- ~sample-list~ : ~list~ -> ~simple-vector~
  - return a vector of items
- ~sample-alist~ : ~list~ -> ~simple-vector~
  - return a vector of associations: key-datum pairs
- ~sample-plist~ : ~list~ -> ~simple-vector~
  - return a vector of properties: indicator-value pairs
- ~sample-tree~ : ~list~ -> ~simple-vector~
  - returns a vector of nodes
    - trees have to be "dotted" lists if you don't want a ~nil~ as the
      last node
  - used the "tree-equal" trick from lisp-tips to walk the tree
- ~sample-biased-alist~ : ~(or simple-vector (integer 1 *))~, ~list~ -> ~simple-vector~
  - returns a vector of alist "keys" chosen by weights in the alist
    "datum"
  - implemented with a "algorithm Achao with jumps"

**** Random list items, of differnt list "types"

Returns single list items, associations, properties or nodes.
Implemented with the sample functions.

- ~random-list-item~ : ~list~ -> ~t~
  - Prefer this to ~random-nth~
- ~random-alist-assoc~ : ~list~ -> ~t~
- ~random-plist-property~ : ~list~ -> ~t~
- ~random-tree-node~ : ~list~ -> ~t~
- ~random-biased-alist~ : ~list~ -> ~t~

*** Sample hash-table mappings

Return a vector of randomly selected mappings: key-value pairs from
a hash-table.

- ~sample-hash-table~ : ~(or simple-vector (integer 1 *))~, ~hash-table~ -> ~simple-vector~
   - return a vector of mappings
- ~random-hash-table-mapping~ : ~(or simple-vector (integer 1 *))~, ~hash-table~ -> ~t~
  - return a single mapping
- ~sample-biased-hash-table~ : ~(or simple-vector (integer 1 *))~, ~hash-table~ -> ~simple-vector~
  - return a vector of hash keys by weights in hash values
- ~random-biased-hash-table~ : ~(or simple-vector (integer 1 *))~, ~hash-table~ -> ~t~
  - return a single hash key by weights in hash tables

*** Shuffles

Return shuffled sequences.

- ~nshuffle-string~ : ~string~ -> ~string~
- ~nshuffle-simple-vector~ : ~simple-vector~ -> ~simple-vector~
- ~nshuffle-list~ : ~list~ -> ~list~
  - probably fine but maybe avoid
- ~nshuffle-array~ : ~array~ -> ~array~
  - probably fine?
- ~shuffle-sequence~ : ~sequence~ -> ~sequence~
  - returns shuffled copy of sequence

See the TODO document for future ideas and features that might appear
here.

** ~chance-user~

This is the interactive package which inherits all the symbols in the
~chance~ system. Use for testing, experimenting, play.

Enter environment with =(in-package #:chance-user)=

Special features for ~chance-user~ forthcoming, see TODO.

** ~chance-test~

To run tests: =(asdf:test-system "org.wobh.common-lisp.tools.chance")=

Test improvement effort forthcoming, see TODO.

* COMMENT org settings
#+options: ':nil *:t -:t ::t <:t H:6 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:nil todo:t |:t
